@page "/"

@using MauiApp2.Services
@using Plugin.BLE.Abstractions;
@using Plugin.BLE.Abstractions.Contracts
@using Plugin.BLE.Abstractions.EventArgs

@inject BLEService BLEService

<h1>Bluetooth gavl</h1>

<p>What the gavl.</p>

@if (BLEService.devices == null)
{
    <p><em>Loading...</em></p>
}
else if (isConnecting)
{
    <p><em>Connecting to device...</em></p>
}
else if (connectedToDevice != null)
{
    <p><em>Connected to device: @(GetDeviceDisplayName(connectedToDevice))</em></p>
}
else 
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>RSSI</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var device in BLEService.devices)
            {
                <tr @onclick="() => OnClickConnect(device)">
                    <td>@(GetDeviceDisplayName(device))</td>
                    <td>@device.Rssi</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Inject]
    private IPromptService promptService{ get; set; }

    private bool isConnecting;

    private IDevice connectedToDevice;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        BLEService.DevicesChanged += StateHasChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(BLEService.BeginScan);
    }

    private void OnClickConnect(IDevice device)
    {
        promptService.ShowConfirmation("Connect to device", $"Would you like to connect to the device \"{GetDeviceDisplayName(device)}\"?", (accepted) =>
        {
            if (accepted)
            {
                isConnecting = true;
                InvokeAsync(StateHasChanged);

                BLEService.ConnectToDevice(device, (success, msg) =>
                {
                    if (success)
                    {
                        connectedToDevice = device;
                        promptService.ShowAlert("Connection succeeded", $"Successfully connected to the device \"{GetDeviceDisplayName(device)}\"!");
                    }
                    else
                    {
                        promptService.ShowAlert("Connection failed", $"Could not connect to device: {msg}.");
                    }

                    isConnecting = false;
                    InvokeAsync(StateHasChanged);
                });
            }
        });
    }

    private static string GetDeviceDisplayName(IDevice device)
    {
        return string.IsNullOrEmpty(device.Name) ? "Unknown device" : device.Name;
    }
}
